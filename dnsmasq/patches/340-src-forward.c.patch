--- a/src/forward.c	2017-07-28 22:42:10.217757860 +0800
+++ b/src/forward.c	2017-07-29 19:53:50.901873043 +0800
@@ -147,11 +147,38 @@
       }
     else if (serv->flags & SERV_HAS_DOMAIN)
       {
-	unsigned int domainlen = strlen(serv->domain);
-	char *matchstart = qdomain + namelen - domainlen;
-	if (namelen >= domainlen &&
-	    hostname_isequal(matchstart, serv->domain) &&
-	    (domainlen == 0 || namelen == domainlen || *(matchstart-1) == '.' ))
+	unsigned int domainlen = matchlen;
+	int serverhit = 0;
+ 
+#ifdef HAVE_REGEX
+	if (serv->flags & SERV_IS_REGEX)
+	  {
+	    int captcount = 0;
+	    if (pcre_fullinfo(serv->regex, serv->pextra, PCRE_INFO_CAPTURECOUNT, &captcount) == 0)
+	      {
+		/* C99 dyn-array, or alloca must be used */
+		int ovect[(captcount + 1) * 3];
+		if (pcre_exec(serv->regex, serv->pextra, qdomain, namelen, 0, 0, ovect, (captcount + 1) * 3) > 0)
+		  {
+		    domainlen = (unsigned int) (ovect[1] - ovect[0]);
+		    if (domainlen >= matchlen)
+		      serverhit = 1;
+		  }
+	      }
+	  }
+	else
+#endif
+	  {
+	    char *matchstart;
+	    domainlen = strlen(serv->domain);
+	    matchstart = qdomain + namelen - domainlen;
+	    if (namelen >= domainlen &&
+	        hostname_isequal(matchstart, serv->domain) &&
+	        (domainlen == 0 || namelen == domainlen || *(matchstart-1) == '.' ))
+	       serverhit = 1;
+	  }
+
+	if (serverhit)
 	  {
 	    if ((serv->flags & SERV_NO_REBIND) && norebind)	
 	      *norebind = 1;
@@ -229,6 +256,34 @@
   return  flags;
 }
 
+static int match_domain_for_forward(char *domain, struct server *serv)
+{
+  int ret_val = 0;
+ if ( domain == NULL ){
+  if (serv->domain == NULL){
+		  return 1;
+	  }else {
+		  return 0;
+	  }
+  }
+  if(serv->flags & SERV_IS_REGEX)
+    {
+#ifdef HAVE_REGEX
+      int captcount = 0;
+      if (pcre_fullinfo(serv->regex, serv->pextra, PCRE_INFO_CAPTURECOUNT, &captcount) == 0)
+	{
+	  /* C99 dyn-array, or alloca must be used */
+	  int ovect[(captcount + 1) * 3];
+	  ret_val = pcre_exec(serv->regex, serv->pextra, domain,
+	                      strlen(domain), 0, 0, ovect, (captcount + 1) * 3) > 0;
+	}
+#endif
+    }
+  else
+    ret_val = hostname_isequal(domain, serv->domain);
+  return ret_val;
+ }
+ 
 static int forward_query(int udpfd, union mysockaddr *udpaddr,
 			 struct all_addr *dst_addr, unsigned int dst_iface,
 			 struct dns_header *header, size_t plen, time_t now, 
@@ -444,8 +499,8 @@
 	     must be NULL also. */
 	  
 	  if (type == (start->flags & SERV_TYPE) &&
-	      (type != SERV_HAS_DOMAIN || hostname_isequal(domain, start->domain)) &&
-	      !(start->flags & (SERV_LITERAL_ADDRESS | SERV_LOOP)))
+       !(start->flags & SERV_LITERAL_ADDRESS) &&
+	      (type != SERV_HAS_DOMAIN || match_domain_for_forward(domain, start)))	      
 	    {
 	      int fd;
 
@@ -577,15 +632,30 @@
       unsigned int matchlen = 0;
       for (ipset_pos = daemon->ipsets; ipset_pos; ipset_pos = ipset_pos->next) 
 	{
-	  unsigned int domainlen = strlen(ipset_pos->domain);
-	  char *matchstart = daemon->namebuff + namelen - domainlen;
-	  if (namelen >= domainlen && hostname_isequal(matchstart, ipset_pos->domain) &&
-	      (domainlen == 0 || namelen == domainlen || *(matchstart - 1) == '.' ) &&
-	      domainlen >= matchlen) 
-	    {
-	      matchlen = domainlen;
-	      sets = ipset_pos->sets;
-	    }
+	  if (ipset_pos->flags & IPSET_IS_REGEX){
+#ifdef HAVE_REGEX
+		  int captcount = 0;
+		  if (pcre_fullinfo(ipset_pos->regex, ipset_pos->pextra, PCRE_INFO_CAPTURECOUNT, &captcount) == 0)
+		  {
+			  /* C99 dyn-array, or alloca must be used */
+			  int ovect[(captcount + 1) * 3];
+			  if (pcre_exec(ipset_pos->regex, ipset_pos->pextra, daemon->namebuff, namelen, 0, 0, ovect, (captcount + 1) * 3) > 0){
+				  sets = ipset_pos->sets;
+			  }
+		  }
+
+#endif
+	  }else{
+		  unsigned int domainlen = strlen(ipset_pos->domain);
+		  char *matchstart = daemon->namebuff + namelen - domainlen;
+		  if (namelen >= domainlen && hostname_isequal(matchstart, ipset_pos->domain) &&
+				  (domainlen == 0 || namelen == domainlen || *(matchstart - 1) == '.' ) &&
+				  domainlen >= matchlen)
+		  {
+			  matchlen = domainlen;
+			  sets = ipset_pos->sets;
+		  }
+	  }
 	}
     }
 #endif
